@Type1
--param:0
local ce=require"curve_editor"
local gp=obj.getpoint
local idx,t=math.modf(gp"index")
local st=gp(idx)
local ed=gp(idx+1)
local par=gp"param"
return ce.getcurve(0,par,t,st,ed) or ce.getcurve(1,par,t,st,ed) or ce.getcurve(2,-par,t,st,ed) or ce.getcurve(5,par-524288,t,st,ed) or gp"default"


@Type1(中間点無視)
--twopoint
--param:0
local ce=require"curve_editor"
local gp=obj.getpoint
local par=gp"param"
return ce.getcurve(0,par,gp"totalindex",gp(0),gp(1)) or ce.getcurve(1,par,gp"totalindex",gp(0),gp(1)) or ce.getcurve(2,-par,gp"totalindex",gp(0),gp(1)) or ce.getcurve(5,par-524288,gp"totalindex",gp(0),gp(1)) or gp"default"


@Type1(補間)
--param:0
local ce=require"curve_editor"
local gp=obj.getpoint
local par=gp"param"
local prog=gp"totalindex"
prog=ce.getcurve(0,par,prog,0,1) or ce.getcurve(1,par,prog,0,1) or ce.getcurve(2,-par,prog,0,1) or ce.getcurve(5,par-524288,t,st,ed) or prog
local num=gp"num"

local function interpolate(idx,t)
    local x0,y0,z0,x1,y1,z1,x2,y2,z2,x3,y3,z3
    if 0<idx then
	    x0,y0,z0 = gp(idx-1,0,3)
    else
        x0,y0,z0=gp(0,0,3)
        x1,y1,z1=gp(1,0,3)
        x2,y2,z2=gp(2,0,3)
        x0=(x0*3+x2)/2-x1
        y0=(y0*3+y2)/2-y1
        z0=(z0*3+z2)/2-z1
    end
    if idx+2<num then
        x3,y3,z3=gp(idx+2,0,3)
    else
        x3,y3,z3=gp(num-1,0,3)
        x2,y2,z2=gp(num-2,0,3)
        x1,y1,z1=gp(num-3,0,3)
        x3=x3+(x3-x2*2+x1)/2
        y3=y3+(y3-y2*2+y1)/2
        z3=z3+(z3-z2*2+z1)/2
    end
    x1,y1,z1=gp(idx,0,3)
    x2,y2,z2=gp(idx+1,0,3)

    local _,n=gp"link"
    if n<3 then
        z0,z1,z2=0,0,0
        if n<2 then
            y0,y1,y2=0,0,0
        end
    end

    return obj.interpolation(t,x0,y0,z0,x1,y1,z1,x2,y2,z2,x3,y3,z3)
end

local function get_length(idx)
    local N=5
    local sum=0
    for i=0,N-1 do
        local x0,y0,z0=interpolate(idx,i/N)
        local x1,y1,z1=interpolate(idx,(i+1)/N)
        sum=sum+math.sqrt((x1-x0)^2+(y1-y0)^2+(z1-z0)^2)
    end
    return sum
end

local l_sum=0
for i=0,num-1 do
    l_sum=l_sum+get_length(i)
end

local tmp,idx,t=0,0,0
for i=0,num-1 do
    local l=get_length(i)
    tmp=tmp+l
    local l_prog=l_sum*prog
    if prog<0 then
        idx=0
        t=prog*l_sum/get_length(0)
        break
    elseif 1<prog then
        idx=num-2
        t=1+(prog-1)*l_sum/get_length(num-2)
        break
    elseif l_prog<=tmp then
        idx=i
        t=(l_sum*prog-tmp+l)/l
        break
    end
end

return interpolate(idx,t)


@Type2
--param:0
local ce=require"curve_editor"
local gp=obj.getpoint
local idx,t=math.modf(gp"index")
local st=gp(idx)
local ed=gp(idx+1)
local par=gp"param"
return ce.getcurve(3,par,t,st,ed) or ce.getcurve(4,par,t,st,ed) or gp"default"


@Type2(中間点無視)
--twopoint
--param:0
local ce=require"curve_editor"
local gp=obj.getpoint
local par=gp"param"
return ce.getcurve(3,par,gp"totalindex",gp(0),gp(1)) or ce.getcurve(4,par,gp"totalindex",gp(0),gp(1)) or gp"default"


@Type2(補間)
--param:0
local ce=require"curve_editor"
local gp=obj.getpoint
local par=gp"param"
local prog=gp"totalindex"
prog=ce.getcurve(3,par,prog,0,1) or ce.getcurve(4,par,prog,0,1) or prog
local num=gp"num"

local function interpolate(idx,t)
    local x0,y0,z0,x1,y1,z1,x2,y2,z2,x3,y3,z3
    if 0<idx then
	    x0,y0,z0 = gp(idx-1,0,3)
    else
        x0,y0,z0=gp(0,0,3)
        x1,y1,z1=gp(1,0,3)
        x2,y2,z2=gp(2,0,3)
        x0=(x0*3+x2)/2-x1
        y0=(y0*3+y2)/2-y1
        z0=(z0*3+z2)/2-z1
    end
    if idx+2<num then
        x3,y3,z3=gp(idx+2,0,3)
    else
        x3,y3,z3=gp(num-1,0,3)
        x2,y2,z2=gp(num-2,0,3)
        x1,y1,z1=gp(num-3,0,3)
        x3=x3+(x3-x2*2+x1)/2
        y3=y3+(y3-y2*2+y1)/2
        z3=z3+(z3-z2*2+z1)/2
    end
    x1,y1,z1=gp(idx,0,3)
    x2,y2,z2=gp(idx+1,0,3)

    local _,n=gp"link"
    if n<3 then
        z0,z1,z2=0,0,0
        if n<2 then
            y0,y1,y2=0,0,0
        end
    end

    return obj.interpolation(t,x0,y0,z0,x1,y1,z1,x2,y2,z2,x3,y3,z3)
end

local function get_length(idx)
    local N=5
    local sum=0
    for i=0,N-1 do
        local x0,y0,z0=interpolate(idx,i/N)
        local x1,y1,z1=interpolate(idx,(i+1)/N)
        sum=sum+math.sqrt((x1-x0)^2+(y1-y0)^2+(z1-z0)^2)
    end
    return sum
end

local l_sum=0
for i=0,num-1 do
    l_sum=l_sum+get_length(i)
end

local tmp,idx,t=0,0,0
for i=0,num-1 do
    local l=get_length(i)
    tmp=tmp+l
    local l_prog=l_sum*prog
    if prog<0 then
        idx=0
        t=prog*l_sum/get_length(0)
        break
    elseif 1<prog then
        idx=num-2
        t=1+(prog-1)*l_sum/get_length(num-2)
        break
    elseif l_prog<=tmp then
        idx=i
        t=(l_sum*prog-tmp+l)/l
        break
    end
end

return interpolate(idx,t)